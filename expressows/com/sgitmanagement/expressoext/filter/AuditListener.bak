package com.sgitmanagement.expressoext.filter;

import java.lang.reflect.Field;
import java.util.Date;
import java.util.Set;

import javax.persistence.EntityManager;
import javax.persistence.PreUpdate;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.annotations.Formula;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.sgitmanagement.expresso.util.DateUtil;
import com.sgitmanagement.expresso.util.Util;
import com.sgitmanagement.expressoext.base.BaseEntity;
import com.sgitmanagement.expressoext.security.AuditTrail;
import com.sgitmanagement.expressoext.security.User;

public class AuditListener {
	final static protected Logger logger = LoggerFactory.getLogger(AuditListener.class);

	public static ThreadLocal<EntityManager> entityManagerThreadLocal = new ThreadLocal<>();
	public static ThreadLocal<User> userThreadLocal = new ThreadLocal<>();

	static public void setEntityManager(EntityManager em) {
		entityManagerThreadLocal.set(em);
	}

	static public void setUser(User user) {
		userThreadLocal.set(user);
	}

	// @PrePersist
	// @PreRemove
	@PreUpdate
	private void beforeAnyOperation(Object object) {
		// we cannot perform auditing at the field level here
		try {
			recordAuditTrail((BaseEntity) object, null, null, null);
		} catch (Exception e) {
		}
	}

	private Integer getUserId() {
		User user = userThreadLocal.get();
		Integer userId;
		if (user == null) {
			userId = 22; // system
		} else {
			userId = user.getId();
		}
		return userId;
	}

	private void recordAuditTrail(BaseEntity e, Field field, Object currentValue, Object newValue) throws Exception {

		EntityManager em = entityManagerThreadLocal.get();

		if (em == null) {
			// logger.warn("AuditTrailInterceptor not initialized properly: missing EntityManager");
			return;
		}

		Integer userId = getUserId();

		String fieldName = field != null ? field.getName() : "";

		Set<String> ignoreFieldSet = e.ignoreFieldsForAuditTrail();
		if (ignoreFieldSet.contains(fieldName)) {
			// do not log
		} else if ((currentValue == null && (newValue != null && newValue.equals(""))) || (newValue == null && (currentValue != null && currentValue.equals("")))) {
			// ignore difference between null and empty
		} else if (field != null && (field.isAnnotationPresent(Formula.class) || field.isAnnotationPresent(Transient.class))) {
			// do not audit
		} else if (fieldName.endsWith("Ids")) {
			// do not audit
		} else {
			// logger.debug("AUDIT TRAIL - Date[" + new Date() + "] Id[" + e.getId() + "] User[" + getUser()
			// + "] Entity[" + e.getClass().getSimpleName() + "] Field[" + fieldName + "] currentValue["
			// + currentValue + "] NewValue[" + newValue + "]");

			try {
				String currentStringValue = null;
				String newStringValue = null;

				// if the field is a reference, get the reference
				if (fieldName.endsWith("Id")) {
					String listName = fieldName.substring(0, fieldName.length() - 2);

					// get the field associated with it
					Field listField = Util.getField(e, listName);
					if (listField != null) {
						// logger.debug("listField.getDeclaringClass(): " + listField.getType().getName());

						BaseEntity currentValueEntity = null;
						if (currentValue != null) {
							currentValueEntity = (BaseEntity) em.find(listField.getType(), (Integer) currentValue);
							currentStringValue = currentValueEntity.getLabel();
						}

						BaseEntity newValueEntity = null;
						if (newValue != null) {
							newValueEntity = (BaseEntity) em.find(listField.getType(), (Integer) newValue);
							if (newValueEntity != null) {
								newStringValue = newValueEntity.getLabel();
							} else {
								logger.warn("Cannot find [" + listField.getType() + " with id [" + newValue + "]");
							}
						}
					}
				} else {
					if (currentValue instanceof Date || newValue instanceof Date) {
						// format date or date time
						if (field.isAnnotationPresent(Temporal.class)) {
							Temporal temporalAnnotation = field.getAnnotation(Temporal.class);

							if (temporalAnnotation.value().equals(TemporalType.TIMESTAMP)) {
								// date time
								currentStringValue = DateUtil.formatDate((Date) currentValue, DateUtil.DATETIME_NOSEC_FORMAT_TL.get());

								newStringValue = DateUtil.formatDate((Date) newValue, DateUtil.DATETIME_NOSEC_FORMAT_TL.get());
							} else {
								// date only
								currentStringValue = DateUtil.formatDate((Date) currentValue, DateUtil.DATE_FORMAT_TL.get());

								newStringValue = DateUtil.formatDate((Date) newValue, DateUtil.DATE_FORMAT_TL.get());
							}
						} else {
							logger.error("Date with no annotation? [" + fieldName + "]");
						}
					} else if (currentValue instanceof Boolean || newValue instanceof Boolean) {
						currentStringValue = currentValue != null && (Boolean) currentValue ? "Oui" : "Non";
						newStringValue = newValue != null && (Boolean) newValue ? "Oui" : "Non";
					} else {
						currentStringValue = currentValue != null ? "" + currentValue : null;
						newStringValue = newValue != null ? "" + newValue : null;
					}
				}

				// max 1000 char
				int maxLength = 1000;
				if (currentStringValue != null && currentStringValue.length() > maxLength) {
					currentStringValue = currentStringValue.substring(0, maxLength - 1);
				}
				if (newStringValue != null && newStringValue.length() > maxLength) {
					newStringValue = newStringValue.substring(0, maxLength - 1);
				}

				// entity name
				String entityClassName = e.getClass().getSimpleName();

				// if this is a proxy object, the entityClassName will contains a underscore (remove it)
				if (entityClassName.indexOf('_') != -1) {
					entityClassName = entityClassName.substring(0, entityClassName.indexOf('_'));
				}

				// save Audit (only if it changed)
				if (!Util.equals(newStringValue, currentStringValue)) {
					AuditTrail auditTrail = new AuditTrail(entityClassName, e.getId(), fieldName, currentStringValue, newStringValue, userId);
					em.persist(auditTrail);
				}
			} catch (Exception ex) {
				// do not stop because there is a problem with the AuditTrail
				logger.error("Cannot record the audit trail", ex);
			}
		}
	}

}
